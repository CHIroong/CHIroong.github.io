import os

from gtts import gTTS
from pydub import AudioSegment

def speed_change(sound, speed=1.0):
    sound_with_altered_frame_rate = sound._spawn(sound.raw_data, overrides={
        "frame_rate": int(sound.frame_rate * speed)
    })
    return sound_with_altered_frame_rate.set_frame_rate(sound.frame_rate)

def save_tts_mp3(sentence, output_filename, speed=1):
    sentence = " ".join(sentence.split())
    print(sentence)
    tts = gTTS(sentence, lang='ko')
    tts.save(output_filename)
    if speed != 1:
        reopened = AudioSegment.from_mp3(output_filename)
        speed_change(reopened, speed=speed).export(output_filename, format="mp3")

scripts = {
    "2": "지금부터는 실험 방법에 대해 설명드리겠습니다. 실험은 총 6개의 세션으로 구성되어 있으며, 하나의 세션마다 8개의 웹 페이지에 관한 미리보기 정보를 드릴 것입니다. 여기서 웹 페이지의 정보라는 것은 스크린 리더를 통해 웹을 탐색할 때 얻을 수 있는 정보를 의미합니다. 저희는 총 두 가지 방법으로 웹 페이지의 미리보기 정보를 드릴 것이며, 그 두 방법의 효과 차이를 알아보고자 하는 것이 이 실험의 목적입니다. 다시 들으시려면 스페이스를, 진행하시려면 엔터를 눌러주세요.",
    "1": "안녕하세요. 저희는 서울대학교 HCI 연구실의 최길웅, 송재윤, 조재민입니다. 실험에 참가해주셔서 감사합니다. 저희는 스크린 리더를 통한 인터넷 탐색을 돕는 프로그램을 개발했는데, 그 효과를 알아보기 위해 이 실험을 진행하게 되었습니다. 실험 소요 시간은 약 30분이며, 소리를 들으며 안내에 따라 키보드를 누르는 방식으로 진행됩니다. 당신은 언제든지 연구 참여를 중단할 수 있으며, 연구에 끝까지 참여해주시면 보상이 지급됩니다. 다시 들으시려면 스페이스를, 진행하시려면 엔터를 눌러주세요.",
    "3": "저희가 웹 페이지의 미리보기 정보를 제공하는 첫 번째 방식은 스크린리더의 사이트 서머리 기능을 모방한 것입니다. 하나의 웹 사이트마다 15초의 길이의 소리가 제공될 것입니다. 소리는 다음과 같이 구성됩니다. 첫 번째로, 해당 페이지를 구성하는 헤더, 링크, 이미지, 표의 갯수를 말해드립니다. 두 번째로, 해당 페이지의 네비게이션 메뉴와 헤더를 제한 시간이 끝날 때까지 순서대로 읽어드립니다. 다시 들으시려면 스페이스를, 진행하시려면 엔터를 눌러주세요.",
    "4_0": "다음은 첫 번째 방식으로 제공되는 소리의 예시입니다.",
    "5": "저희가 웹 페이지의 미리보기 정보를 제공하는 두 번째 방식은 사운드글래스라는 기능입니다. 사운드글랜스 기능은 웹 사이트에서 비시각장애인 사용자가 추출할 수 있는 정보를 위주로 전달합니다. 하나의 웹 사이트마다 15초 길이의 소리가 제공될 것입니다. 첫 번째로, 해당 페이지를 구성하는 텍스트, 이미지, 광고 영역의 면적을 비프음으로 알려드립니다. 소리가 길 수록 해당 요소가 더 많다는 것을 의미합니다. 두 번째로, 해당 페이지에서 가장 크기가 큰 문장을 5초 동안 읽어드립니다. 마지막으로, 해당 페이지의 내용을 자동으로 요약한 문장을 제한 시간이 끝날 때까지 읽어드립니다. 다시 들으시려면 스페이스를, 진행하시려면 엔터를 눌러주세요.",
    "6_0": "해당 페이지를 구성하는 텍스트, 이미지, 광고 영역의 면적은 다음과 같이 알려드립니다. 먼저, 텍스트 영역의 면적을 낮은 단음으로 알려드립니다. 그 다음, 이미지 영역의 면적을 중간 높이의 화음으로 알려드립니다. 그 다음, 광고 영역의 면적을 높은 불협화음으로 알려드립니다. 제시되는 순서는 언제나 텍스트, 이미지, 광고로 일정합니다. 예시를 세 개 들려드리겠습니다.",
    "7": "본 실험은 총 6개의 세션으로 구성되어 있으며, 하나의 세션마다 8개의 미리보기 정보가 주어집니다. 각 세션에는 찾고자 하는 정보와 검색 키워드가 주어지며, 8개의 사이트는 검색 결과에서 뽑은 것입니다. 8개의 사이트 중에는 믿을 만하지 않은 사이트나, 관련 없는 내용을 담고 있는 사이트가 있을 수 있습니다. 각 사이트의 미리보기 정보를 듣고, 그 사이트를 들어가서 더 탐색할 용의가 있는지를 1부터 5 사이의 숫자로 판단해주십시오. 다시 들으시려면 스페이스를, 진행하시려면 엔터를 눌러주세요.",
    "8": "지금부터 연습 세션이 진행됩니다. 연습 세션에서는 총 2개의 사이트가 제공됩니다. 다시 들으시려면 스페이스를, 진행하시려면 엔터를 눌러주세요.",
    "9": "이상으로 연습이 종료되었습니다. 이제, 방금과 같은 방식으로 실제 실험을 시작하도록 하겠습니다. 다시 들으시려면 스페이스를, 진행하시려면 엔터를 눌러주세요. 원하신다면 잠시 휴식하셔도 좋습니다.",

    "session_start": "엔터키를 누르면 다음 세션을 시작합니다.",
    "session_intro_0": "세션을 시작합니다. 다음의 검색 상황 및 키워드를 주의 깊게 들어주세요. " + "당신은 맥주 한 잔이 밥 한 공기만큼의 열량을 가진다는 말을 듣고, 소주에도 열량이 있는지 알아보고자 합니다. 다음은 소주 칼로리라는 키워드로 검색했을 때 나온 페이지입니다.",
    "session_intro_1": "세션을 시작합니다. 다음의 검색 상황 및 키워드를 주의 깊게 들어주세요. " + "당신은 기상예보에서 태풍이 온다는 소식을 듣고, 개인 차원에서 태풍 피해를 예방하려면 어떻게 해야 하는지 조사하기로 하였습니다. 다음은 태풍 대비책이라는 키워드로 검색해서 나온 사이트들입니다",
    "session_intro_2": "세션을 시작합니다. 다음의 검색 상황 및 키워드를 주의 깊게 들어주세요. " + "당신은 친구로부터 곤약이 다이어트에 좋다는 말을 듣고, 곤약이 인체에 어떤 효과를 주는지 조사하기로 하였습니다. 다음은 곤약 효과라는 키워드로 검색해서 나온 사이트들입니다.",
    "session_intro_3": "세션을 시작합니다. 다음의 검색 상황 및 키워드를 주의 깊게 들어주세요. " + "당신은 컴퓨터에 대해 배경지식이 없는 사람입니다. TV에서 이세돌과 알파고의 바둑 대국을 본 뒤, 당신은 컴퓨터가 어떻게 바둑을 두는지를 조사하여 중학생 아들에게 설명해주고자 합니다. 다음은 알파고 원리라는 키워드로 검색해서 나온 사이트들입니다.",
    "session_intro_4": "세션을 시작합니다. 다음의 검색 상황 및 키워드를 주의 깊게 들어주세요. " + "당신은 가수 싸이의 역대 컴백 일정을 조사하고 있습니다. 싸이가 현재까지 발매한 앨범들이 언제 발매되었으며, 어떤 곡이 수록되어 있고, 컴백 당시 어떤 행사들을 했는지 알고자 합니다. 다음은 싸이 컴백이라는 키워드로 검색해서 나온 사이트들입니다.",
    "session_intro_5": "세션을 시작합니다. 다음의 검색 상황 및 키워드를 주의 깊게 들어주세요. " + "당신은 조미료인 MSG에 대해 배경지식이 없는 사람입니다. 어느 날, 친구들로부터 MSG는 몸에 나쁘다는 주장과 MSG는 유해하지 않다는 주장을 동시에 접한 당신은 MSG가 실제로 유해한지를 조사하고자 합니다. 다음은 MSG 부작용이라는 키워드로 검색해서 나온 사이트들입니다.",
    "session_intro_6": "세션을 시작합니다. 다음의 검색 상황 및 키워드를 주의 깊게 들어주세요. " + "당신은 방콕 여행을 계획하고 있으며, 방콕에 갔을 때 어떤 관광 명소들을 둘러볼지를 알아보고자 합니다. 다음은 방콕 명소라는 키워드로 검색해서 나온 사이트들입니다.",

    "ask_value": "방금 들은 사이트는 들어가서 더 탐색해볼 가치가 있다고 생각하시나요? 1부터 5 사이의 숫자로 응답해주세요. 숫자가 높을 수록 더 가치 있는 사이트라는 것을 의미합니다.",
    "confirm_1": "1번을 누르셨습니다. 맞으시면 엔터, 아니면 다른 숫자를 입력해주세요.",
    "confirm_2": "2번을 누르셨습니다. 맞으시면 엔터, 아니면 다른 숫자를 입력해주세요.",
    "confirm_3": "3번을 누르셨습니다. 맞으시면 엔터, 아니면 다른 숫자를 입력해주세요.",
    "confirm_4": "4번을 누르셨습니다. 맞으시면 엔터, 아니면 다른 숫자를 입력해주세요.",
    "confirm_5": "5번을 누르셨습니다. 맞으시면 엔터, 아니면 다른 숫자를 입력해주세요.",

    "re": "다시 들으시려면 스페이스를, 진행하시려면 엔터를 눌러주세요.",
    "end": "실험이 종료되었습니다. 연구자의 안내에 따라 설문지 작성 페이지로 이동해주세요. 감사합니다."
}

#for name, script in scripts.items():
    #save_tts_mp3(script, f"audio/script_{name}.mp3", speed=1.5)

s_4_0 = AudioSegment.from_mp3('audio/script_4_0.mp3')
s_4_1 = AudioSegment.from_mp3('audio/SS_0_1.mp3')
s_4_2 = AudioSegment.from_mp3('audio/script_re.mp3')
(s_4_0 + s_4_1 + s_4_2).export("audio/script_4.mp3", format="mp3")

s_6_0 = AudioSegment.from_mp3('audio/script_6_0.mp3')
s_6_1 = AudioSegment.from_mp3('audio/glance_example_0.mp3')
s_6_2 = AudioSegment.from_mp3('audio/glance_example_1.mp3')
s_6_3 = AudioSegment.from_mp3('audio/glance_example_2.mp3')
s_6_4 = AudioSegment.from_mp3('audio/script_re.mp3')
(s_6_0 + s_6_1 + s_6_2 + s_6_3 + s_6_4).export('audio/script_6.mp3', format='mp3')

for filename in os.listdir('audio'):
    if (filename.startswith("SG") or filename.startswith("SS")) and "ask" not in filename:
        stimulus = AudioSegment.from_mp3('audio/' + filename)
        silent = AudioSegment.silent(duration=1000)
        ask = AudioSegment.from_mp3('audio/script_ask_value.mp3')
        (stimulus + silent + ask).export('audio/' + filename.split('.')[0] + '_ask.mp3', format="mp3")

